***********
prysm v0.22
***********

Version 0.22 marks the final version of prysm prior to 1.0, in which
compatibility and API stability will be guaranteed.  In preparation for this,
the library has been split into mature code such as coordinates, geometry,
propagation, or polynomials, and less mature code in code :`prysm.x`-perimental
(shorthand, x or x/).  The compatibility guarantee of 1.0 will not extend to x.

The new x/ modules are detailed in the release notes below.  This release
brings a number of new features for modeling specific types of wavefront
sensors, and alternate segmentation geometry in segmented telescopes. All
optical propagation routines now feature convenient gradient backpropagation
equivalents for extremely fast optimization of optical models to learn
parameters, perform phase retrieval, etc.

`dygdug <https://github.com/brandondube/dygdug>`_ has been created as an
external module of prysm dedicated to coronagraphy, similar to the x
submodule.  dygdug is not being released as 1.0 and will likely go through years
of breaking changes to improve the ergonomics and performance of the API.  A
significant aspect of dygdug will be the full support for algorithmic
differentiation of the models and tools for performing advanced gradient-based
optimization of coronagraphs, both to design nominal solutions and perform
wavefront control of real systems.  For the highest performance, the
differentiation has been done by hand.


New Features
============

Polynomials
-----------

Rich XY polynomial capability has been introduced:

* :func:`~prysm.polynomials.xy.j_to_xy`

* :func:`~prysm.polynomials.xy.xy_polynomial`

* :func:`~prysm.polynomials.xy.xy_polynomial_sequence`

Additionally, Laguerre polynomials have been introduced, which can be used for
generating Laguerre-Gaussian beams:

* :func:`~prysm.polynomials.laguerre`

* :func:`~prysm.polynomials.laguerre_der`

* :func:`~prysm.polynomials.laguerre_sequence`

* :func:`~prysm.polynomials.laguerre_der_sequence`

All of the :code:`_sequence` polynomial functions have been revised.
Previously, they returned generators to allow weighted sums of extremely high
order expansions to be computed in a reduced memory footprint.  This lead to the
most common usage being :code:`basis = array(list(xxx_sequence()))`.  This
benefit has been more theoretical than practical.  Now equivalent usage is
:code:`basis = xxx_sequence()`, which returns the dense array of shape
:code:`(K,N,M)` directly (K=num modes, (N,M) = spatial dimensionality).

Propagation
-----------

* new .real property, returning a Richdata to support wf.real.plot2d() and
  similar usage

* new .imag property, same as .real

* :func:`~prysm.propagation.Wavefront.to_fpm_and_back` now takes a :code:`shift`
  argument, allowing off-axis propagation without adding wavefront tilt

* all propagation routines have a :code:`_backprop` twin, which should be used
  to do gradient backpropagation through optical models

* add and subtract :code:`+` and :code:`-` operators are now defined for
  :class:`~prysm.propagation.Wavefront` for convenient recombination /
  superposition of waves, as in interferometers


Segmented Systems
-----------------

* Compositing and per-segment errors of "keystone" apertures via
  :class:`~prysm.segmented.CompositeKeystoneAperture`

Bayer
-----

* :code:`prysm.bayer.wb_scale` has been renamed to
  :func:`~prysm.bayer.wb_postscale`

* :func:`~prysm.bayer.wb_postscale` now has additional :code:`safe` and
  :code:`saturation` kwargs for colorimetrically correct handling of saturation

* :func:`~prysm.bayer.demosaic_deinterlate` for deinterlace-style demosaicing,
  which cuts resolution by a factor of two but imparts no blur or color channel
  crosstalk.


i/o
---

* :func:`prysm.io.write_zygo_dat` to write Zygo .dat files.

* :func:`prysm.io.read_codev_psf` to load PSF output from Code V

* :func:`prysm.io.read_codev_bsp` to load BSP data from Code V.

* :func:`prysm.io.write_codev_gridint` to write Code V grid INT files.

* :func:`prysm.io.write_codev_zfr_int` to write Code V grid Fringe Zernike INT files.


Detectors
---------

new :func:`~prysm.detector.apply_lut` function, and associated kwarg :code:`lut`
when initializing a :class:`~prysm.detector.Detector` instance.  This adds the
capability to simulate detector nonlinearity that is homogeneous over the whole
array.

More convenient backend swaps, misc
-----------------------------------

* :func:`prysm.mathops.set_backend_to_cupy`,
  :func:`~prysm.mathops.set_backend_to_pytorch`,
  :func:`~prysm.mathops.set_fft_backend_to_mkl_fft` and
  :func:`~prysm.mathops.set_backend_to_defaults`.

Note that other numpy/scipy-like APIs can also be used, and these are simply
convenience functions; there is no special support for either library beyond
these simple functions.

* the :func:`~prysm._richdata.RichData.plot2d` method of RichData now has an
  :code:`extend` keyword argument, which controls the extension of the colorbar
  beyond the color limits.


eXperimental Modules
====================

A total of seven new x/ modules have been introduced in this release.  Half of
them concern modeling different kinds of interferometers or wavefront sensors,
while the remaining half are general and widely applicable.  The largest of the
new additions is :code:`x/opytm`, a package for optimization with several cost
functions, activation functions, and gradient-based optimizers.

x/opytm
-------

The interface of this package is very different to :code:`scipy.optimize` and it
offers numerous optimizers and building blocks from the machine learning world.
In addition to API level documentation that describes each of these items in
detail, a new :doc:`Optimization Basics` tutorial has been created which
demonstrates how to use the module, as well as a how-to on
:doc:`Differentiable-Optical-Models` which demonstrates how to use the
algorithmic differentiation capabilities built into prysm to perform phase
retrieval with x/optym.

Optimizers

* :func:`~prysm.x.optym.optimizers.GradientDescent`
* :func:`~prysm.x.optym.optimizers.AdaGrad`
* :func:`~prysm.x.optym.optimizers.RMSProp`
* :func:`~prysm.x.optym.optimizers.Adam`
* :func:`~prysm.x.optym.optimizers.RAdam`
* :func:`~prysm.x.optym.optimizers.Yogi`
* :func:`~prysm.x.optym.optimizers.AdaMomentum`
* :func:`~prysm.x.optym.optimizers.F77LBFGSB`

All have full support for GPUs and 32-bit numbers, except for F77LBFGSB which
is CPU-only and double precision only.

Activation functions and discretizers

* :func:`~prysm.x.optym.activation.Softmax`
* :func:`~prysm.x.optym.activation.GumbelSoftmax`
* :func:`~prysm.x.optym.activation.DiscreteEncoder`

Cost or loss functions

* :func:`~prysm.x.optym.cost.BiasAndGainInvariantError`
* :func:`~prysm.x.optym.cost.LogLikelyhood`

x/polarization
--------------

New module for Jones calculus and other polarization calculations. Included is
an adapter that generalizes all routines within the propagation module to
propagation of Jones states, an extremely powerful feature for modeling
polarized fields.

TODO link to new tutorials/documentation

Jones Vectors

* :func:`~prysm.x.polarization.linear_pol_vector`
* :func:`~prysm.x.polarization.circular_pol_vector`

Jones Matrices

* :func:`~prysm.x.polarization.jones_rotation_matrix`
* :func:`~prysm.x.polarization.linear_retarder`
* :func:`~prysm.x.polarization.linear_diattenuator`
* :func:`~prysm.x.polarization.linear_polarizer`
* :func:`~prysm.x.polarization.half_wave_plate`
* :func:`~prysm.x.polarization.quarter_wave_plate`

Conversion to Mueller matrices and simple data reduction with Pauli spin
matrices:

* :func:`~prysm.x.polarization.jones_to_mueller`
* :func:`~prysm.x.polarization.pauli_spin_matrix`
* :func:`~prysm.x.polarization.pauli_coefficients`

x/fibers
--------

New module with routines to parametrically study cylindrical step index fibers
and wavesguides.  Contains functions to identify the :math:`LP_{\ell{}m}` modes
of single and multi-mode fibers as well as evaluate them numerically.  Also
contains the mode overlap integral used to model coupling of complex E-fields
into fibers and waveguides.

The main user-facing routines are:

* :func:`~prysm.x.fibers.numerical_aperture`

* :func:`~prysm.x.fibers.V`

* :func:`~prysm.x.fibers.find_all_modes`

* :func:`~prysm.x.fibers.compute_LP_modes`

* :func:`~prysm.x.fibers.smf_mode_field`

* :func:`~prysm.x.fibers.mode_overlap`


x/psi, x/pdi, x/sri, x/shack_hartmann
-------------------------------------

These four modules are for the modeling of Shack-Hartmann sensors abd two types
of pinhole and/or fiber/waveguide based interferometers.  Extensive phase
shifting interferometry (PSI) reconstruction capability is included, both
of wavefront phase as well as complex E-field.  A future release will include
additional capability for differential reconstruction that is superior to taking
the difference of two absolute reconstructions, after it has been published.

* Forward modeling of Shack Hartmann wavefront sensors using
  :func:`~prysm.x.shack_hartmann.shack_hartmann` and the propagation module

* Forward modeling of Phase Shifting Point Diffraction Interferometers, aka
  Medecki interferometers using :class:`~prysm.x.pdi.PSPDI` and the routines and
  consants of x/psi

* Forward modeling of Self-Referenced Interferometers (SRIs), which use a
  pinhole to generate the reference wave using light from the input port using
  :class:`~prysm.x.sri.PinholeSRI`

* SRIs, which use a single mode fiber or waveguide to generate the reference
  wave using light from the input port using :class:`~prysm.x.sri.PSRI`

* PSI routines:

* * :func:`~prysm.x.psi.degroot_formalism_psi` for reconstructing phase from a
    set of PSI measurements.  See also the package-level constants XXX_SHIFTS,
    XXX_SS, XXX_CS for several sets of s and c and phase shift values

* * :func:`~prysm.x.psi.psi_accumulate` for accumulating the sums of de groot's
    formalism, an essential intermediate step in full complex E-field
    reconstruction and differential reconstruction

* * :func:`~prysm.x.psi.differential_re_im` for direct reconstruction of the
    change in the real and complex part of the E-field based on two PSI
    measurements

* * :func:`~prysm.x.psi.differential_amp_phs` which is analagous to the Re and
    Im function

Note that when performing differential reconstructions, it may often be useful
to work with (amp1 - amp0)/amp0, instead of the difference directly.
Interferometers which have apodization over the pupil will naturally have
smaller differences in the dimmer regions of the pupil.  If the apodization does
not change between the two measuements, this division will improve accuracy
considerably


x/dm
----

* :func:`~prysm.x.dm.DM.copy` method to clone a DM, when e.g. the two DMs in a
  system are the same

* new Nout parameter that controls the amount of padding or cropping of the
  natural model resolution is done.  The behavior here is similar to PROPER

* the forward model of the DM is now differentiable.
  :func:`~prysm.x.dm.DM.render_backprop` performs gradient
  backpropagation through :func:`~prysm.x.dm.DM.render`


Performance Optimizations
=========================

* :func:`~prysm.propagation.angular_spectrum_transfer_function` has been
  optimized.  The new runtime is approximately the square root of that of the
  old.  For example, on a 1024x1024 array, in version 0.21 this function took
  31 ms on a desktop.  It now takes 4 ms for the same array size and output

* :func:`~prysm.geometry.rectangle` has been optimized when the rotation angle
  is zero

* :func:`~prysm.geometry.rectangle` has been optimized when the coordinates are
  exactly square/cartesian (not rotated)

* :func:`~prysm.io.read_zygo_dat` now only performs big/little endian
  conversions on phase arrays when necessary (little endian systems), which
  creates a slight performance enhancement for big endian systems, such as apple
  silicon

Bug Fixes
=========

* The sign of :func:`~prysm.propagation.Wavefront.thin_lens` was incorrect,
  requiring a propagation by the negative of the focal length to go to the
  focus.  The sign has been swapped; :code:`(wf * thin_lens(f,...)).free_space(f)``
  now goes to the focus

* :func:`~prysm.otf.mtf_from_psf` as well as the ptf and otf functions used the
  wrong pixel as the origin for normalization, when array sizes were odd.  This
  has been fixed

* a bug in :code:`scipy.special.factorial2` has been fixed in a recent version.
  Like all respectable software, prysm depended on that bug.  Q2D polynomials
  would return NaN for m=1, n=0 (Q-coma) with scipy's bugfix.  This has been
  corrected within prysm in this version, and Q-coma is no longer destined for
  NaN

* :code:`prysm.polynomials.zernike.barplot` and
  :code:`~prysm.polynomials.zernike.barplot_magnitudes` now apply axis labels to
  the correct axis when plotting on a figure with multiple axes

* fixed a bug in :func:`prysm.psf.encircled_energy` where x,y axes were double
  meshgrided

Breaking Changes
================

Numerous features related to MTF benches have been removed.  The code was
extremely old, had incomplete test coverage, and is rarely used:

* :func:`prysm.io.read_trioptics_mtfvfvf`

* :func:`prysm.io.read_trioptics_mtf_vs_field`

* :func:`prysm.io.read_trioptics_mtf`

* the entire :code:`mtf_utils` module

* sample Trioptics mht and txt files

Within the geometry module, all functions now use homogeneous names of x, y, r,
and t for arguments.  The :func:`~prysm.geometry.circle` and
:func:`~prysm.geometry.truecircle` routines have had some of their arguments
renamed.

The following functions have been removed from the polynomials submodule:

* separable_2d_sequence

* mode_1d_to_2d

* sum_of_xy_modes

They assumed strict separability of the two axes, with no cross terms.  This can
be acheived by having terms where only m or n is positive in the new XY
routines.  In general, suppressing cross terms artificially is not intended and
the functions have been removed to avoid confusion.

The degredations module has been modernized, and two bugs have been fixed in
doing so.  The magnitude of jitter now matches more common modern formalisms,
and is twice as large for the same "scale" parameter has previously.  The smear
parametrization has been modified from (mag,ang) to (mag x, mag y).  Pass
width=0 or height=0 for monodirectional smear.  This also corrects a bug, in
which only the diagonal elements of the transfer function were corectly
populated with sinc() when rotation != 0 previously.

:func:`prysm.io.read_zygo_dat` was reworked to improve code reuse with the new
write function.  In doing so, some of the nesting in the dictionary
representation of the metadata has become flat or unnested.  The reading of
phase and intensity is unchanged.
